generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comments {
  id        BigInt   @id @default(autoincrement()) @map("id")
  userId    String   @map("userId")
  boardId   BigInt   @map("boardId")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  like      BigInt   @default(0)
  boards    board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([boardId], map: "comments_boardId_fkey")
  @@index([userId], map: "comments_userId_fkey")
  @@map("comments")
}

model board {
  id        BigInt       @id @default(autoincrement())
  userId    String
  title     String
  content   String
  status    board_status @default(Notset)
  recom     BigInt       @default(0)
  createdAt DateTime     @default(now())
  updateAt  DateTime     @updatedAt()
  media     String?
  users     users        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Board_userId_fkey")
  comments  comments[]
  recoms     recom[]

  @@index([userId], map: "Board_userId_fkey")
}

model follows {
  followerId                      String
  followedId                      String
  users_follows_followedIdTousers users  @relation("follows_followedIdTousers", fields: [followedId], references: [id], map: "Follows_followedId_fkey")
  users_follows_followerIdTousers users  @relation("follows_followerIdTousers", fields: [followerId], references: [id], map: "Follows_followerId_fkey")

  @@id([followerId, followedId])
  @@index([followedId], map: "Follows_followedId_fkey")
}

model recom {
  id      BigInt @id @default(autoincrement())
  userId  String
  boardId BigInt
  board   board  @relation(fields: [boardId], references: [id], onDelete: Cascade, map: "Recom_boardId_fkey")
  users   users  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Recom_userId_fkey")

  @@index([boardId], map: "Recom_boardId_fkey")
  @@index([userId], map: "Recom_userId_fkey")
}

model users {
  id                                String     @id
  email                             String     @unique(map: "Users_email_key")
  password                          String
  nickname                          String
  role                              users_role @default(USER)
  follow                            BigInt     @default(0)
  content                           String?   
  token                             String?    @db.Text
  board                             board[]
  comments                          comments[]
  follows_follows_followedIdTousers follows[]  @relation("follows_followedIdTousers")
  follows_follows_followerIdTousers follows[]  @relation("follows_followerIdTousers")
  recom                             recom[]
}

enum board_status {
  Notset
  Proceeding
  Solved
  Incomplete
}

enum users_role {
  USER
  LAWYER
  MANAGER
  OWNER
}
